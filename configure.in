AC_INIT(src/wacom.c)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(linuxwacom, 0.5.0-beta)
AM_MAINTAINER_MODE
AC_PROG_CC
AC_PROG_AWK

XF86SUBDIR=xc/programs/Xserver

dnl Targets
WCM_PROGS=""
WCM_MODULES=""
WCM_XF86PROGS=""
WCM_XF86MODULES=""
WCM_EXPPROGS=""
WCM_EXPMODULES=""
WCM_PATCH_HID=""

dnl Check architecture, kernel type
AC_WCM_CHECK_ENVIRON

dnl If linux kernel is detected, check for module versioning and kernel source
if test x$WCM_ISLINUX = xyes; then
	AC_WCM_CHECK_MODVER
	AC_WCM_CHECK_KERNELSOURCE
fi

dnl Check for XFree86 source
AC_WCM_CHECK_XFREE86SOURCE

dnl Check for wacom build
WCM_OPTION_WACOM=no
AC_ARG_ENABLE(wacom,
[  --enable-wacom  Enable building wacom.o                  default=yes],
	, enable_wacom=$WCM_KERNEL_WACOM_DEFAULT)
if test "$enable_wacom" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacom.o without kernel build environment"
		echo "*** wacom.o will not be built"
		echo "***"
	else
		WCM_OPTION_WACOM=yes
		WCM_MODULES="$WCM_MODULES wacom.o"
	fi
fi

dnl Check for wacdump build
WCM_OPTION_WACDUMP=no
AC_ARG_ENABLE(wacdump,
[  --enable-wacdump   Enable building wacdump               default=yes],
	, enable_wacdump=yes)
if test "$enable_wacdump" != "no"; then
	WCM_OPTION_WACDUMP=yes
	WCM_PROGS="$WCM_PROGS wacdump"
fi

dnl Check for hid build
WCM_OPTION_HID=no
AC_ARG_ENABLE(hid,
[  --enable-hid    Enable building hid.o                    default=no],
	, enable_hid=no)
if test "$enable_hid" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile hid.o without kernel build environment"
		echo "*** hid.o will not be built"
		echo "***"
	else
		WCM_OPTION_HID=yes
		WCM_MODULES="$WCM_MODULES hid.o"
	fi
fi

dnl Check for usbmouse build
WCM_OPTION_USBMOUSE=no
AC_ARG_ENABLE(usbmouse,
[  --enable-usbmouse  Enable building usbmouse.o               default=no],
	, enable_usbmouse=no)
if test "$enable_usbmouse" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile usbmouse.o without kernel build environment"
		echo "*** usbmouse.o will not be built"
		echo "***"
	else
		WCM_OPTION_USBMOUSE=yes
		WCM_MODULES="$WCM_MODULES usbmouse.o"
	fi
fi

dnl Check for wacomdrv build
WCM_OPTION_WACOMDRV=no
AC_ARG_ENABLE(wacomdrv,
[  --enable-wacomdrv  Enable building wacom_drv.o            default=no],
	, enable_wacomdrv=no)
if test "$enable_wacomdrv" != "no"; then
	if test "$WCM_ENV_XF86" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacom_drv.o without XF86 build environment"
		echo "*** wacom_drv.o will not be built"
		echo "***"
	else
		WCM_OPTION_WACOMDRV=yes
		WCM_XF86MODULES="$WCM_XF86MODULES wacom_drv.o"
		WCM_EXPMODULES="$WCM_EXPMODULES wacom_drv.o"
	fi
fi

dnl Check for arch
AC_ARG_WITH(arch,
[  --with-arch      Use specified architecture],
[
	WCM_ARCH=$withval
])

dnl Check for modver
AC_ARG_ENABLE(modver,
[  --enable-modver  Enable kernel module versioning        default=usually],
	, enable_modver=$WCM_MODVER)
if test "$enable_modver" = "no"; then
	WCM_OPTION_MODVER=no
	WCM_MODVER=""
elif test "$enable-modver" = "yes"; then
	WCM_OPTION_MODVER=yes
	WCM_MODVER="-DCONFIG_MODVERSIONS"
else
	dnl not explicitly set, go with default
	WCM_MODVER=""
fi

dnl Check for changed field names in hid-core.c
if test "$WCM_OPTION_HID" = "yes"; then
	AC_MSG_CHECKING(for updated field names in hid-core.c)
	HIDCORE="$WCM_KERNELDIR/drivers/usb/hid-core.c"
	if test -f "$HIDCORE"; then
		PATCH_DRVALUE=`grep 'dr\\.wValue' "$HIDCORE" | wc -l`
		if test "$PATCH_DRVALUE" -gt 0; then
			AC_MSG_RESULT([yes, using 2.4.20])
			AC_DEFINE(WCM_PATCH_DRVALUE,1,[Need the dr.wValue patch])
			WCM_PATCH_HID="(value_patch) $WCM_PATCH_HID"
		else
			AC_MSG_RESULT([no, using 2.4.19])
			AC_DEFINE(WCM_PATCH_DRVALUE,0,[Do not need the dr.wValue patch])
		fi
	else
		AC_MSG_RESULT([missing, using 2.4.19])
		AC_DEFINE(WCM_PATCH_DRVALUE,0,[Do not need the dr.wValue patch])
		echo "***"
		echo "*** Warning: unable to find hid-core.c in kernel tree"
		echo "*** It was not possible to detect whether patches needed to be"
		echo "*** applied.  If the hid-core.c in this project does not build"
		echo "*** correctly, you should resolve this problem first."
		echo "***"
	fi

	AC_MSG_CHECKING(for HID_QUIRK)
	HID_H="$WCM_KERNELDIR/drivers/usb/hid.h"
	if test -f "$HID_H"; then
		PATCH_QUIRK=`grep 'HID_QUIRK' "$HID_H" | wc -l`
		if test "$PATCH_QUIRK" -gt 0; then
			AC_MSG_RESULT(yes)
			AC_DEFINE(WCM_PATCH_NOQUIRK,0,[Missing quirks])
		else
			AC_MSG_RESULT(no)
			AC_DEFINE(WCM_PATCH_NOQUIRK,1,[Missing quirks])
			WCM_PATCH_HID="(quirk_patch) $WCM_PATCH_HID"
		fi
	else
		AC_MSG_RESULT([missing, assuming quirks are OK])
		AC_DEFINE(WCM_PATCH_NOQUIRK,0,[Missing quirks])
		echo "***"
		echo "*** Warning: unable to find hid.h in kernel tree"
		echo "*** It was not possible to detect whether patches needed to be"
		echo "*** applied.  If the hid-core.c in this project does not build"
		echo "*** correctly, you should resolve this problem first."
		echo "***"
	fi
fi

dnl Check for -fno-merge-constants if using gcc
if test "x$GCC" = "xyes"; then
    AC_MSG_CHECKING(if gcc accepts -fno-merge-constants)
    OLD_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS -fno-merge-constants"
    AC_TRY_COMPILE(, "int main(void) { return 0; }",
        has_no_merge_constants=yes,
        has_no_merge_constants=no)
    CFLAGS=$OLD_CFLAGS

    if test "$has_no_merge_constants" = "yes" ; then
        AC_MSG_RESULT(yes)
        WCM_NO_MERGE_CONSTANTS="-fno-merge-constants"
    else
        AC_MSG_RESULT(no)
        WCM_NO_MERGE_CONSTANTS=""
    fi
fi

dnl Separate test output from file-generation output
echo 

AC_SUBST(WCM_PROGS)
AC_SUBST(WCM_MODULES)
AC_SUBST(WCM_XF86PROGS)
AC_SUBST(WCM_XF86MODULES)
AC_SUBST(WCM_EXPPROGS)
AC_SUBST(WCM_EXPMODULES)
AC_SUBST(WCM_ARCH)
AC_SUBST(WCM_MODVER)
AC_SUBST(WCM_KERNELDIR)
AC_SUBST(WCM_XF86DIR)
AC_SUBST(WCM_NO_MERGE_CONSTANTS)
AC_SUBST(WCM_LINUX_INPUT)

AC_OUTPUT(Makefile src/Makefile)

echo ""
echo "----------------------------------------"
echo "  BUILD ENVIRONMENT:"
echo "       architecture - $WCM_ARCH"
echo "       linux kernel - $WCM_ISLINUX"
echo "  module versioning - $WCM_OPTION_MODVER"
echo "      kernel source - $WCM_ENV_KERNEL"
echo "            XFree86 - $WCM_ENV_XF86"
echo ""
echo "  BUILD OPTIONS:"
echo "            wacom.o - $WCM_OPTION_WACOM"
echo "            wacdump - $WCM_OPTION_WACDUMP $WCM_PATCH_WACDUMP"
echo "              hid.o - $WCM_OPTION_HID $WCM_PATCH_HID"
echo "         usbmouse.o - $WCM_OPTION_USBMOUSE"
echo "        wacom_drv.o - $WCM_OPTION_WACOMDRV $WCM_PATCH_WACOMDRV"
echo "----------------------------------------"
