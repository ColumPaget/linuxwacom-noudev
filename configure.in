AC_INIT(src/2.4/wacom.c)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(linuxwacom, 0.5.4-beta)
AM_MAINTAINER_MODE
AC_PROG_CC
AC_PROG_AWK
AC_PROG_LIBTOOL

dnl Library versions
WCM_LIBWACOMCFG_VER="0:1:0"
AC_SUBST(WCM_LIBWACOMCFG_VER)

dnl Targets
WCM_PROGS=""
WCM_LIBS=""
WCM_TCLLIBS=""
WCM_TCLPKGS=""
WCM_MODULES=""
WCM_XF86PROGS=""
WCM_XF86MODULES=""
WCM_EXPPROGS=""
WCM_EXPMODULES=""
WCM_PATCH_HID=""

dnl Setup paths based on configuration parameters
AC_WCM_SET_PATHS

dnl Check architecture, kernel type
AC_WCM_CHECK_ENVIRON

dnl If linux kernel is detected, check for module versioning and kernel source
if test x$WCM_ISLINUX = xyes; then
	AC_WCM_CHECK_KERNELSOURCE
	AC_WCM_CHECK_MODVER
fi

dnl Check for XFree86 source
AC_WCM_CHECK_XFREE86SOURCE
AC_WCM_CHECK_XFREE86V3SOURCE

dnl Check for GTK, TCL, TK, and XLib
AC_WCM_CHECK_GTK
AC_WCM_CHECK_XLIB
AC_WCM_CHECK_TCL
AC_WCM_CHECK_TK

dnl Check for ncurses
AC_WCM_CHECK_NCURSES

dnl Check for wacom build
WCM_OPTION_WACOM=no
AC_ARG_ENABLE(wacom,
[  --enable-wacom  Enable building wacom.o                  default=no],
	, enable_wacom=no)
if test "$enable_wacom" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacom.o without kernel build environment"
		echo "*** wacom.o will not be built"
		echo "***"
	else
		WCM_OPTION_WACOM=yes
		WCM_MODULES="$WCM_MODULES wacom.o"
		if test "$WCM_KERNEL_VER" = "2.6"; then
			cp $WCM_KERNELDIR/drivers/usb/input/wacom.c \
				$WCM_KERNELDIR/drivers/usb/input/wacom.c.bak
			cp src/2.6/wacom.c $WCM_KERNELDIR/drivers/usb/input
			rm -f src/2.6/*.o 
		fi
	fi
fi

dnl Check for wacdump build
WCM_OPTION_WACDUMP=no
AC_ARG_ENABLE(wacdump,
[  --enable-wacdump   Enable building wacdump               default=yes],
	, enable_wacdump=yes)
if test "$enable_wacdump" != "no"; then
	if test x$WCM_ENV_NCURSES != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacdump without ncurses environment"
		echo "*** wacdump will not be built"
		echo "***"
	else
		WCM_OPTION_WACDUMP=yes
		WCM_PROGS="$WCM_PROGS wacdump"
	fi
fi

dnl Check for xidump build
WCM_PATCH_XIDUMP=
WCM_OPTION_XIDUMP=no
AC_ARG_ENABLE(xidump,
[  --enable-xidump   Enable building xidump               default=yes],
	, enable_xidump=$WCM_XIDUMP_DEFAULT)
if test "$enable_xidump" != "no"; then
	if test x$WCM_ENV_XLIB != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** xidump requires XLib environment; xidump will not be built."
		echo "***"
	else
		if test x$WCM_ENV_NCURSES != xyes; then
			echo "***"; echo "*** WARNING:";
			echo "*** xidump will build without ncurses support."
			echo "***"
			WCM_PATCH_XIDUMP="(no ncurses) $WCM_PATCH_XIDUMP"
		fi
		WCM_OPTION_XIDUMP=yes
		WCM_XIDUMP_LIBS="-L$WCM_XLIBDIR/lib -lX11 -lXi"
		WCM_PROGS="$WCM_PROGS xidump"
	fi
fi

dnl Check for libwacomcfg build
WCM_OPTION_LIBWACOMCFG=no
AC_ARG_ENABLE(libwacomcfg,
[  --enable-libwacomcfg  Enable building libwacomcfg           default=yes],
	, enable_libwacomcfg=yes)
if test "$enable_libwacomcfg" != "no"; then
	if test x$WCM_ENV_XLIB != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** libwacomcfg requires XLib environment; libwacomcfg will not be built."
		echo "***"
	else
		WCM_OPTION_LIBWACOMCFG=yes
		WCM_LIBWACOMCFG_LIBS="-L$WCM_XLIBDIR/lib -lX11 -lXi"
		WCM_LIBS="$WCM_LIBS libwacomcfg.la"
	fi
fi

dnl Check for xsetwacom build
WCM_OPTION_XSETWACOM=no
AC_ARG_ENABLE(xsetwacom,
[  --enable-xsetwacom  Enable building xsetwacom             default=yes],
	, enable_xsetwacom=yes)
if test "$enable_xsetwacom" != "no"; then
	if test x$WCM_OPTION_LIBWACOMCFG != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** xsetwacom requires libwacomcfg; xsetwacom will not be built."
		echo "***"
	else
		WCM_OPTION_XSETWACOM=yes
		WCM_XSETWACOM_LIBS="-L$WCM_XLIBDIR/lib -lX11 -lXi"
		WCM_PROGS="$WCM_PROGS xsetwacom"
	fi
fi

dnl Check for libwacomxi build
WCM_WACOMXI_BINDIR=$WCM_EXECDIR/bin
WCM_WACOMXI_LIBDIR=$WCM_EXECDIR/lib
AC_SUBST(WCM_WACOMXI_BINDIR)
AC_SUBST(WCM_WACOMXI_LIBDIR)
WCM_OPTION_LIBWACOMXI=no
AC_ARG_ENABLE(libwacomxi,
[  --enable-libwacomxi  Enable building libwacomxi             default=yes],
	, enable_libwacomxi=yes)
if test "$enable_libwacomxi" != "no"; then
	if test x$WCM_ENV_XLIB != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** libwacomxi requires XLib environment; libwacomxi will not be built."
		echo "***"
	elif test x$WCM_ENV_TCL != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** libwacomxi requires tcl environment; libwacomxi will not be built."
		echo "***"
	elif test x$WCM_ENV_TK != xyes; then
		echo "***"; echo "*** WARNING:";
		echo "*** libwacomxi requires tk environment; libwacomxi will not be built."
		echo "***"
	else
		WCM_OPTION_LIBWACOMXI=yes
		WCM_WACOMXI_LIBS="-L$WCM_XLIBDIR/lib -lX11 -lXi -L$WCM_TCLLIBDIR/tcl -L$WCM_TKLIBDIR/tk"
		WCM_TCLLIBS="$WCM_TCLLIBS libwacomxi.la"
		WCM_TCLPKGS="$WCM_TCLPCKS pkgIndex.tcl"
	fi
fi

AM_CONDITIONAL(WACOMXI_INSTALL, test "$WCM_OPTION_LIBWACOMXI" == "yes")

dnl Check for hid build
WCM_OPTION_HID=no
AC_ARG_ENABLE(hid,
[  --enable-hid    Enable building hid.o                    default=no],
	, enable_hid=no)
if test "$enable_hid" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile hid.o without kernel build environment"
		echo "*** hid.o will not be built"
		echo "***"
	else
		WCM_OPTION_HID=yes
		if test "$WCM_KERNEL_VER" != "2.4"; then
			if test "$WCM_KERNEL_VER" = "2.4.22"; then
				cp $WCM_KERNELDIR/drivers/usb/hid-input.c src/2.4.22
				cp $WCM_KERNELDIR/drivers/usb/hiddev.c src/2.4.22
			else
				if test "$WCM_KERNEL_VER" = "2.6"; then
					cp $WCM_KERNELDIR/drivers/usb/input/hid-core.c \
						$WCM_KERNELDIR/drivers/usb/input/hid-core.c.bak
					cp src/2.6/hid-core.c $WCM_KERNELDIR/drivers/usb/input
					rm -f src/2.6/*.o 
				fi
			fi
		fi
		WCM_MODULES="$WCM_MODULES hid.o"
	fi
fi

dnl Check for usbmouse build
WCM_OPTION_USBMOUSE=no
AC_ARG_ENABLE(usbmouse,
[  --enable-usbmouse  Enable building usbmouse.o               default=no],
	, enable_usbmouse=no)
if test "$enable_usbmouse" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile usbmouse.o without kernel build environment"
		echo "*** usbmouse.o will not be built"
		echo "***"
	else
		WCM_OPTION_USBMOUSE=yes
		if test "$WCM_KERNEL_VER" != "2.4"; then
			if test "$WCM_KERNEL_VER" = "2.4.22"; then
				cp $WCM_KERNELDIR/drivers/usb/usbmouse.c src/2.4.22
			else
				if test "$WCM_KERNEL_VER" = "2.6"; then
					cp $WCM_KERNELDIR/drivers/usb/input/usbmouse.c \
						$WCM_KERNELDIR/drivers/usb/input/usbmouse.c.bak
					cp src/2.6/usbmouse.c $WCM_KERNELDIR/drivers/usb/input
					rm -f src/2.6/*.o 
				fi
			fi
		fi
		WCM_MODULES="$WCM_MODULES usbmouse.o"
	fi
fi

dnl Check for evdev build
WCM_OPTION_EVDEV=no
AC_ARG_ENABLE(evdev,
[  --enable-evdev  Enable building evdev.o               default=no],
	, enable_evdev=no)
if test "$enable_evdev" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile evdev.o without kernel build environment"
		echo "*** evdev.o will not be built"
		echo "***"
	else
		WCM_OPTION_EVDEV=yes
		if test "$WCM_KERNEL_VER" = "2.6"; then
			cp $WCM_KERNELDIR/drivers/input/evdev.c \
				$WCM_KERNELDIR/drivers/input/evdev.c.bak
			cp src/2.6/evdev.c $WCM_KERNELDIR/drivers/input
			rm -f src/2.6/*.o 
		fi
		WCM_MODULES="$WCM_MODULES evdev.o"
	fi
fi

dnl Check for mousedev build
WCM_OPTION_MOUSEDEV=no
AC_ARG_ENABLE(mousedev,
[  --enable-mousedev  Enable building mousedev.o               default=no],
	, enable_mousedev=no)
if test "$enable_mousedev" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile mousedev.o without kernel build environment"
		echo "*** mousedev.o will not be built"
		echo "***"
	else
		WCM_OPTION_MOUSEDEV=yes
		WCM_MODULES="$WCM_MODULES mousedev.o"
		if test "$WCM_KERNEL_VER" = "2.6"; then
			cp $WCM_KERNELDIR/drivers/input/mousedev.c \
				$WCM_KERNELDIR/drivers/input/mousedev.c.bak
			cp src/2.6/mousedev.c $WCM_KERNELDIR/drivers/input
			rm -f src/2.6/*.o 
		fi
	fi
fi

dnl Check for input build
WCM_OPTION_INPUT=no
AC_ARG_ENABLE(input,
[  --enable-input  Enable building input.o               default=no],
	, enable_input=no)
if test "$enable_input" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile input.o without kernel build environment"
		echo "*** input.o will not be built"
		echo "***"
	else
		WCM_OPTION_INPUT=yes
		if test "$WCM_KERNEL_VER" != "2.4"; then
			cp $WCM_KERNELDIR/drivers/input/input.c src/2.4.22
		fi
		WCM_MODULES="$WCM_MODULES input.o"
	fi
fi

dnl Check for tabletdev build
WCM_OPTION_TABLETDEV=no
AC_ARG_ENABLE(tabletdev,
[  --enable-tabletdev  Enable building tabletdev.o           default=no],
	, enable_tabletdev=no)
if test "$enable_tabletdev" != "no"; then
	if test "$WCM_ENV_KERNEL" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile tabletdev.o without kernel build environment"
		echo "*** tabletdev.o will not be built"
		echo "***"
	else
		WCM_OPTION_TABLETDEV=yes
		WCM_MODULES="$WCM_MODULES tabletdev.o"
	fi
fi

dnl Check for wacomdrv build
WCM_OPTION_WACOMDRV=no
AC_ARG_ENABLE(wacomdrv,
[  --enable-wacomdrv  Enable building wacom_drv.o            default=yes],
	, enable_wacomdrv=yes)
if test "$enable_wacomdrv" != "no"; then
	if test "$WCM_ENV_XF86" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacom_drv.o without XF86 build environment"
		echo "*** wacom_drv.o will not be built"
		echo "***"
	else
		WCM_OPTION_WACOMDRV=yes
		WCM_XF86MODULES="$WCM_XF86MODULES wacom_drv.o"
		WCM_EXPMODULES="$WCM_EXPMODULES wacom_drv.o"
	fi
fi

dnl Check for wacomdrvv3 build
WCM_OPTION_WACOMDRVV3=no
AC_ARG_ENABLE(wacomdrvv3,
[  --enable-wacomdrvv3  Enable building wacom_drv-v3.o          default=no],
	, enable_wacomdrvv3=no)
if test "$enable_wacomdrvv3" != "no"; then
	if test "$WCM_ENV_XF86V3" != "yes"; then
		echo "***"; echo "*** WARNING:";
		echo "*** Unable to compile wacom_drv-v3.o without XF86V3 build environment"
		echo "*** wacom_drv-v3.o will not be built"
		echo "***"
	else
		WCM_OPTION_WACOMDRVV3=yes
		WCM_XF86MODULES="$WCM_XF86MODULES wacom_drv-v3.o"
		WCM_EXPMODULES="$WCM_EXPMODULES wacom_drv-v3.o"
	fi
fi

dnl Check for arch
AC_ARG_WITH(arch,
[  --with-arch      Use specified architecture],
[
	WCM_ARCH=$withval
])

dnl Check for modver
AC_ARG_ENABLE(modver,
[  --enable-modver  Enable kernel module versioning        default=usually],
	, enable_modver=$WCM_MODVER)
if test "$enable_modver" = "no"; then
	WCM_OPTION_MODVER=no
	WCM_MODVER=""
elif test "$enable-modver" = "yes"; then
	WCM_OPTION_MODVER=yes
	WCM_MODVER="-DCONFIG_MODVERSIONS"
else
	dnl not explicitly set, go with default
	WCM_MODVER=""
fi

dnl Check for changed field names in hid-core.c
if test "$WCM_OPTION_HID" = "yes"; then
	AC_MSG_CHECKING(for updated field names in hid-core.c)
	HIDCORE="$WCM_KERNELDIR/drivers/usb/hid-core.c"
	if test -f "$HIDCORE"; then
		PATCH_DRVALUE=`grep 'dr\\.wValue' "$HIDCORE" | wc -l`
		if test "$PATCH_DRVALUE" -gt 0; then
			AC_MSG_RESULT([yes, using 2.4.20 or later])
			AC_DEFINE(WCM_PATCH_DRVALUE,1,[Need the dr.wValue patch])
			WCM_PATCH_HID="(value_patch) $WCM_PATCH_HID"
		else
			AC_MSG_RESULT([no, using 2.4.19])
			AC_DEFINE(WCM_PATCH_DRVALUE,0,[Do not need the dr.wValue patch])
		fi
	else
		HIDCORE="$WCM_KERNELDIR/drivers/usb/input/hid-core.c"
		if test -f "$HIDCORE"; then
			AC_MSG_RESULT([yes, using 2.6.0])
		else
			AC_MSG_RESULT([missing, using 2.4.19])
			echo "***"
			echo "*** Warning: unable to find hid-core.c in kernel tree"
			echo "*** It was not possible to detect whether patches needed to be"
			echo "*** applied.  If the hid-core.c in this project does not build"
			echo "*** correctly, you should resolve this problem first."
			echo "***"
		fi
		AC_DEFINE(WCM_PATCH_DRVALUE,0,[Do not need the dr.wValue patch])
	fi

	AC_MSG_CHECKING(for HID_QUIRK)
	HID_H="$WCM_KERNELDIR/drivers/usb/hid.h"
	if test -f "$HID_H"; then
		PATCH_QUIRK=`grep 'HID_QUIRK' "$HID_H" | wc -l`
		if test "$PATCH_QUIRK" -gt 0; then
			AC_MSG_RESULT(yes)
			AC_DEFINE(WCM_PATCH_NOQUIRK,0,[Missing quirks])
		else
			AC_MSG_RESULT(no)
			AC_DEFINE(WCM_PATCH_NOQUIRK,1,[Missing quirks])
			WCM_PATCH_HID="(quirk_patch) $WCM_PATCH_HID"
		fi
	else
		HID_H="$WCM_KERNELDIR/drivers/usb/input/hid.h"
		if test -f "$HID_H"; then
			AC_MSG_RESULT([missing, assuming quirks are OK])
		else
			echo "***"
			echo "*** Warning: unable to find hid.h in kernel tree"
			echo "*** It was not possible to detect whether patches needed to be"
			echo "*** applied.  If the hid-core.c in this project does not build"
			echo "*** correctly, you should resolve this problem first."
			echo "***"
		fi
		AC_DEFINE(WCM_PATCH_NOQUIRK,0,[Missing quirks])
	fi
fi

dnl Check for depflags
WCM_DEPFLAGS=
AC_ARG_ENABLE(mkxincludes,
[  --enable-mkxincludes  Enable mkxincludes, XF86 dependency builder   default=no],
	, enable_mkxincludes=no)
if test "x$enable_mkxincludes" == "xyes"; then
	WCM_DEPFLAGS="-MMD"
fi

dnl Check for -fno-merge-constants if using gcc
if test "x$GCC" = "xyes"; then
    AC_MSG_CHECKING(if gcc accepts -fno-merge-constants)
    OLD_CFLAGS="$CFLAGS"
    CFLAGS="$CFLAGS -fno-merge-constants"
    AC_TRY_COMPILE(, "int main(void) { return 0; }",
        has_no_merge_constants=yes,
        has_no_merge_constants=no)
    CFLAGS=$OLD_CFLAGS

    if test "$has_no_merge_constants" = "yes" ; then
        AC_MSG_RESULT(yes)
        WCM_NO_MERGE_CONSTANTS="-fno-merge-constants"
    else
        AC_MSG_RESULT(no)
        WCM_NO_MERGE_CONSTANTS=""
    fi
fi

dnl Separate test output from file-generation output
echo 

AC_SUBST(WCM_PROGS)
AC_SUBST(WCM_LIBS)
AC_SUBST(WCM_TCLLIBS)
AC_SUBST(WCM_TCLPKGS)
AC_SUBST(WCM_MODULES)
AC_SUBST(WCM_XF86PROGS)
AC_SUBST(WCM_XF86MODULES)
AC_SUBST(WCM_EXPPROGS)
AC_SUBST(WCM_EXPMODULES)
AC_SUBST(WCM_ARCH)
AC_SUBST(WCM_MODVER)
AC_SUBST(WCM_KERNELDIR)
AC_SUBST(WCM_KERNEL_VER)
AC_SUBST(WCM_LINUXWACOMDIR)
AC_SUBST(WCM_XF86DIR)
AC_SUBST(WCM_XF86V3DIR)
AC_SUBST(WCM_NO_MERGE_CONSTANTS)
AC_SUBST(WCM_LINUX_INPUT)
AC_SUBST(WCM_XIDUMP_LIBS)
AC_SUBST(WCM_LIBWACOMCFG_LIBS)
AC_SUBST(WCM_WACOMXI_LIBS)
AC_SUBST(WCM_XSETWACOM_LIBS)
AC_SUBST(WCM_DEPFLAGS)

AC_OUTPUT(Makefile
	mkxincludes
	src/Makefile
	src/2.4/Makefile
	src/2.4.22/Makefile
	src/2.6/Makefile
	src/wacomxi/Makefile
	src/wacomxi/wacomcpl)

echo ""
echo "----------------------------------------"
echo "  BUILD ENVIRONMENT:"
echo "       architecture - $WCM_ARCH"
echo "       linux kernel - $WCM_ISLINUX $WCM_KERNEL_VER"
echo "  module versioning - $WCM_OPTION_MODVER"
echo "      kernel source - $WCM_ENV_KERNEL"
echo "            XFree86 - $WCM_ENV_XF86"
echo "               XLib - $WCM_ENV_XLIB"
echo "                TCL - $WCM_ENV_TCL"
echo "                 TK - $WCM_ENV_TK"
if test -n "$WCM_ENV_XF86V3"; then
	echo "          XFree86v3 - $WCM_ENV_XF86V3"
fi
echo "            ncurses - $WCM_ENV_NCURSES"
echo "                GTK - $WCM_ENV_GTK"
echo ""
echo "  BUILD OPTIONS:"
echo "            wacom.o - $WCM_OPTION_WACOM"
echo "            wacdump - $WCM_OPTION_WACDUMP $WCM_PATCH_WACDUMP"
echo "             xidump - $WCM_OPTION_XIDUMP $WCM_PATCH_XIDUMP"
echo "        libwacomcfg - $WCM_OPTION_LIBWACOMCFG"
echo "         libwacomxi - $WCM_OPTION_LIBWACOMXI"
echo "          xsetwacom - $WCM_OPTION_XSETWACOM"
echo "              hid.o - $WCM_OPTION_HID $WCM_PATCH_HID"
echo "         usbmouse.o - $WCM_OPTION_USBMOUSE"
echo "            evdev.o - $WCM_OPTION_EVDEV"
echo "         mousedev.o - $WCM_OPTION_MOUSEDEV"
echo "            input.o - $WCM_OPTION_INPUT"
echo "        tabletdev.o - $WCM_OPTION_TABLETDEV"
echo "        wacom_drv.o - $WCM_OPTION_WACOMDRV $WCM_PATCH_WACOMDRV"
if test -n "$WCM_OPTION_WACOMDRVV3"; then
	echo "     wacom_drv-v3.o - $WCM_OPTION_WACOMDRVV3 $WCM_PATCH_WACOMDRVV3"
fi
echo "----------------------------------------"
